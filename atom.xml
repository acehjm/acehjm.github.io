<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>majhdkl&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://acehjm.github.io/"/>
  <updated>2019-11-02T08:47:08.164Z</updated>
  <id>https://acehjm.github.io/</id>
  
  <author>
    <name>majhdkl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://acehjm.github.io/2019/11/02/Java11+Springboot2+Gradle5+IDEA+Lombok%20%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://acehjm.github.io/2019/11/02/Java11+Springboot2+Gradle5+IDEA+Lombok 编译失败问题记录/</id>
    <published>2019-11-02T08:45:42.588Z</published>
    <updated>2019-11-02T08:47:08.164Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: Java11+Springboot2+Gradle5+IDEA+Lombok 编译失败问题记录</span><br><span class="line">date: 2019-11-2 16:34:56</span><br><span class="line">categories: 技术问题</span><br><span class="line">tags: [gradle, springboot]</span><br></pre></td></tr></table></figure><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在开发个人项目时，使用到了<code>Java11+Springboot2+Gradle5+IDEA+Lombok</code>技术，采用<code>Gradle</code>多项目模式，其中<code>A</code>项目依赖<code>B</code>项目，在<code>IDEA</code>中<code>Lombok</code>使用正常，但是使用<code>Gradle</code>编译构建时，会抛出异常，提示<code>找不到符号</code>，即无法获取到到使用了<code>Lombok</code>相关注解的类和属性。</p><p>以下为<code>build.gradle</code>的部分配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'org.springframework.boot'</span> <span class="string">version</span> <span class="string">'2.2.0.RELEASE'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'io.spring.dependency-management'</span> <span class="string">version</span> <span class="string">'1.0.8.RELEASE'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'java'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">allprojects</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">group</span> <span class="string">=</span> <span class="string">'xxx.xxxxx.xx'</span></span><br><span class="line">    <span class="string">version</span> <span class="string">=</span> <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">    <span class="string">sourceCompatibility</span> <span class="string">=</span> <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">repositories</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">mavenCentral()</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">subprojects</span> <span class="string">&#123;</span> </span><br><span class="line">    <span class="string">apply</span> <span class="attr">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">    <span class="string">apply</span> <span class="attr">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line">    <span class="string">apply</span> <span class="attr">plugin:</span> <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">        <span class="string">compileOnly</span> <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>通过<code>stackoverflow</code>和<code>Gradle</code>文档了解到，<code>Gradle</code>升级到5.0之后，不再支持<code>-processorpath</code>的构建方式，需要改为<code>CompileOptions.annotationProcessorPath</code>的方式。因此，以上的配置已经不能满足<code>Gradle</code>的构建方式，<code>Lombok</code>官方提出<code>annotationProcessor</code>的方式或者插件的方式，以下为修改之后的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">plugins</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'org.springframework.boot'</span> <span class="string">version</span> <span class="string">'2.2.0.RELEASE'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'io.spring.dependency-management'</span> <span class="string">version</span> <span class="string">'1.0.8.RELEASE'</span></span><br><span class="line">    <span class="string">id</span> <span class="string">'java'</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">allprojects</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">group</span> <span class="string">=</span> <span class="string">'xxx.xxxxx.xx'</span></span><br><span class="line">    <span class="string">version</span> <span class="string">=</span> <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">    <span class="string">sourceCompatibility</span> <span class="string">=</span> <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">repositories</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">mavenCentral()</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">subprojects</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">apply</span> <span class="attr">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line">    <span class="string">apply</span> <span class="attr">plugin:</span> <span class="string">'io.spring.dependency-management'</span></span><br><span class="line">    <span class="string">apply</span> <span class="attr">plugin:</span> <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line">    <span class="string">configurations</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">developmentOnly</span></span><br><span class="line">        <span class="string">runtimeClasspath</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">extendsFrom</span> <span class="string">developmentOnly</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">        <span class="string">compileOnly</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="string">extendsFrom</span> <span class="string">annotationProcessor</span></span><br><span class="line">        <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">        <span class="string">compileOnly</span> <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">        <span class="string">annotationProcessor</span> <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>通过以上方式，即可解决<code>Gradle5</code>构建环境下，无法获取<code>Lombok</code>注解信息的问题。也可以添加如上<code>configurations</code>配置域。</p><p>说明：这其实是个很好解决的问题，但是卡在这里很长时间，主要原因是另外一个问题引起的，详细信息见<a href>Springboot2中依赖本地项目Gradle5编译异常问题</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot多模块I18N配置无效，导致No message found under code &#39;xxx&#39; for locale &#39;zh_CN_#Hans&#39;问题</title>
    <link href="https://acehjm.github.io/2019/08/28/i18n-error/"/>
    <id>https://acehjm.github.io/2019/08/28/i18n-error/</id>
    <published>2019-08-28T14:24:38.000Z</published>
    <updated>2019-09-20T15:31:42.108Z</updated>
    
    <content type="html"><![CDATA[<p>在SpringBoot多模块项目开发中，新增了国际化配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="comment"># 国际化文件路径配置</span></span><br><span class="line"><span class="attr">  messages:</span></span><br><span class="line"><span class="attr">    basename:</span> <span class="string">i18n/messages</span></span><br><span class="line"><span class="attr">    encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">    fallbackToSystemLocale:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><code>Resource</code>目录下存在<code>i18n/messages</code>，文件中配置<code>key=value</code>。</p><h6 id="异常"><a href="#异常" class="headerlink" title="异常"></a><strong><em>异常</em></strong></h6><p>使用时遇到<code>org.springframework.context.NoSuchMessageException: No message found under code &#39;error.xxxx.message&#39; for locale &#39;zh_CN_#Hans&#39;</code>。</p><h6 id="排查"><a href="#排查" class="headerlink" title="排查"></a><strong><em>排查</em></strong></h6><ul><li>检查配置项是否正确；</li><li>检查<code>Resource</code>目录下文件是否存在；</li><li>检查文件中<code>key=value</code>是否存在；</li><li>检查编码文件编码是否为UTF_8；</li></ul><p>经过排查，发现以上问题均不存在，且断点进入<code>MessageSource</code>相关方法中发现<code>parentMessageSource</code>始终为空。</p><h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a><strong><em>解决</em></strong></h6><p>后来，看了下<code>messages</code>的配置位置，是在被依赖模块的<code>application.yml</code>配置文件中，想到应该是项目启动后，使用过程中并未在启动项目的<code>Resource</code>目录下发现<code>i18n/messages</code>，而配置生效的路径则为被依赖模块的<code>Resource</code>目录下，因此，导致在被依赖模块目录下找不到<code>i18n/messages</code>而报错。</p><p>将配置转移到启动项目的配置文件中，再次测试国际化正常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SpringBoot多模块项目开发中，新增了国际化配置&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
      <category term="问题" scheme="https://acehjm.github.io/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="SpringBoot,I18N" scheme="https://acehjm.github.io/tags/SpringBoot-I18N/"/>
    
  </entry>
  
  <entry>
    <title>Redis数据类型</title>
    <link href="https://acehjm.github.io/2019/01/20/Redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://acehjm.github.io/2019/01/20/Redis之数据类型/</id>
    <published>2019-01-20T02:34:56.000Z</published>
    <updated>2019-08-19T17:19:33.693Z</updated>
    
    <content type="html"><![CDATA[<!-- 标签 方式，要求版本在0.4.5或以上 --><p>Redis常用数据类型：</p><ul><li>strings：二进制安全的字符串；</li><li>lists：根据插入顺序排序的字符串元素的集合，基本上是链表；</li><li>sets：唯一的，未排序的字符串元素的集合；</li><li>zsets：有序集合，没个字符串元素都与一个浮点数关联，称为分数，元素总是按分数排序；</li><li>hashs：散列或字典，是由与值相关联的字段组成的映射，字段和值都是字符串；</li></ul><a id="more"></a><h4 id="Redis键"><a href="#Redis键" class="headerlink" title="Redis键"></a>Redis键</h4><p>Redis键是二进制安全的，这意味着我们可以使用任何二进制序列作为键，从字符串（包括空字符串）到jpeg等文件的内容都是有效键。</p><p>关于键的一些使用原则：</p><ul><li>避免使用很长的键：键的长度不超过1024位，过长的键对内存不友好，即使当前任务是匹配最大值，在数据库中查找键也需要几次昂贵的比较，对于一些过长的键，可以使用hash之后的结果作为键。</li><li>避免使用过短的键：比如“u1000flw”和“user:1000:flowers”，虽然较短的键可以减小内存空间的使用，但是从可读性方面会差很多。</li><li>尽量使用格式化键：像“object-type:id”这种格式，如“user:1000”，点或短划线通常用于多词字段，如“common:12345:reply.to​”或“common:12345:reply-to”。</li><li>允许的<strong><em>键的最大大小为512M</em></strong>。</li></ul><h4 id="字符串（strings）"><a href="#字符串（strings）" class="headerlink" title="字符串（strings）"></a>字符串（strings）</h4><p>Redis中的字符串类型键值都是字符串，即将一个字符串映射到另外一个字符串。值的字符串类型可以是各种类型的字符串，如二进制数据、空字符串、jpeg图像等。<strong><em>字符串类型值的大小不能超过512M</em></strong>。</p><h6 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h6><p><img src="https://i.loli.net/2019/01/20/5c43fbac67729.png" alt="redis-strings.png"></p><h6 id="字符串常用命令"><a href="#字符串常用命令" class="headerlink" title="字符串常用命令"></a>字符串常用命令</h6><ul><li>SET：设置字符串值（如果该键对应的值已存在，直接覆盖）；</li><li>GET：检索字符串值；</li><li>INCR：解析字符串值作为整数，以一增加它，最后将获得的值作为新的值。</li></ul><p>INCR具有原子性，即使是对同一个键的多个客户的，永远也不会进入竞争状态。例如，在同一时间，不会发生客户端1和客户端2同时读取到“10”，两者都增加到11，并设置新值为11。执行增量操作时，根据原子性最终值为12。</p><p>其它命令如DECR为自减1操作，GETSET命令将键设置为新值并返回旧值，MSET和MGET分别用于批量设置和批量获取值。</p><h6 id="改变和查询键空间"><a href="#改变和查询键空间" class="headerlink" title="改变和查询键空间"></a>改变和查询键空间</h6><p>有些命令没有在特定类型上定义，这些命令为通用命令，与键交互时非常有用，因此可以与任何类型的键一起使用。例如EXISTS命令返回1或0表示数据库中是否存在给定的键，而DEL命令删除键和值（不管值类型），DEL本身返回0或1，具体取决于键是否存在，TYPE命令则返回指定键中值的类型。</p><h6 id="Redis过期时间"><a href="#Redis过期时间" class="headerlink" title="Redis过期时间"></a>Redis过期时间</h6><p>EXPIRE过期时间也是一个与键类型无关的功能。可以为所有的键设置有效期，当有效期过去时，键会自动销毁，和用户主动调用DEL命令一样。</p><p>关于EXPIRE的一些说明，可以使用秒或毫秒进行设置，但是到期时间解析度始终为1毫秒，有关过期时间会被复制并保存在磁盘上，当Redis服务器保持停止时，这个时间实际上会消失（Redis会保存键过期的日期）。</p><h4 id="列表（lists）"><a href="#列表（lists）" class="headerlink" title="列表（lists）"></a>列表（lists）</h4>]]></content>
    
    <summary type="html">
    
      &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;

&lt;p&gt;Redis常用数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;strings：二进制安全的字符串；&lt;/li&gt;
&lt;li&gt;lists：根据插入顺序排序的字符串元素的集合，基本上是链表；&lt;/li&gt;
&lt;li&gt;sets：唯一的，未排序的字符串元素的集合；&lt;/li&gt;
&lt;li&gt;zsets：有序集合，没个字符串元素都与一个浮点数关联，称为分数，元素总是按分数排序；&lt;/li&gt;
&lt;li&gt;hashs：散列或字典，是由与值相关联的字段组成的映射，字段和值都是字符串；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://acehjm.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="redis" scheme="https://acehjm.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java 性能调优（一）</title>
    <link href="https://acehjm.github.io/2018/12/15/Java-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://acehjm.github.io/2018/12/15/Java-性能调优（一）/</id>
    <published>2018-12-15T00:49:56.000Z</published>
    <updated>2019-08-19T12:54:47.083Z</updated>
    
    <content type="html"><![CDATA[<!-- 标签 方式，要求版本在0.4.5或以上 --><p>造成系统瓶颈计算资源的因素有很多，包括CPU资源的调度、内存的读写、磁盘IO、网络IO、数据库、竞争锁、异常等。而系统性能的衡量指标有响应时间、启动时间、执行时间、执行速度、磁盘吞吐量、网络吞吐量、负载承受能力等。那么，从软件的角度看，性能优化的目标有，编写更高效的代码、使用更高效的算法、减少竞争锁、分布式集群、微服务等。而性能的优化策略有，用空间换时间、用时间换空间、优化代码、并行处理等。系统的优化来自三个方面，基础技术、层次方面、架构方面。</p><a id="more"></a><h4 id="Java-API调用优化建议"><a href="#Java-API调用优化建议" class="headerlink" title="Java API调用优化建议"></a>Java API调用优化建议</h4><h5 id="面向对象及基础类型"><a href="#面向对象及基础类型" class="headerlink" title="面向对象及基础类型"></a>面向对象及基础类型</h5><ol><li><p><strong><em>采用<code>clone()</code>方式创建对象</em></strong>：<code>clone()</code>是Object类中的方法，使用时需实现Cloneable接口。当我们使用<code>new</code>关键字创建实例的时候，构造函数中所有构造参数都会被自动调用，而<code>clone()</code>不会调用任何构造函数，避免参数的初始化，在保留原有信息的基础上，创建速度更快。</p><blockquote><ul><li>拷贝对象返回的是一个新对象，而不是原来对象的引用地址。</li><li>拷贝对象与<code>new</code>关键字操作符返回的新对象的区别是，这个拷贝已经包含了一些原来对象的信息，而不是对象的初始化信息。</li></ul></blockquote></li><li><p><strong><em>避免对boolean的判断</em></strong>：boolean被定义为存储8位（1字节）数值的形式，但只能是true或者false。在使用boolean时，避免使用等于判断，准确的说是不要使用<code>3=3 == true</code>这种形式的判断。</p></li><li><p><strong><em>多用条件操作符</em></strong>：大部分时候，我们在代码中比较多用<code>if(...) return; else return;</code>这种形式的判断，但是条件使用太多，对代码的可读性带来影响，因此一些条件语句可以替换为诸如<code>return isdone?0:1</code>这种形式。</p></li><li><p><strong><em>静态（static）方法代替实例方法</em></strong>：为了方便的实现多态的支持，实例方法需要维护一张类似虚拟函数导向表的结构，因此，在调用实例方法时会消耗更多的系统资源，使用类加载时就会初始化的静态方法会更快一些。静态方法和实例方法的两点区别：</p><blockquote><ul><li>在外部调用静态方法时，可以使用“类名.方法名”或“对象名.方法名”的方式，而实例方法只能通过后者调用，即静态方法无需创建对象。</li><li>静态方法在访问本类成员时，只允许访问静态成员，而不允许访问实例成员变量和实例方法，，实例方法则无此限制。</li></ul></blockquote></li><li><p><strong><em>有条件的使用final关键字</em></strong>：final关键字可以修饰类、变量、方法，在使用匿名内部类的时候，经常会用到final关键字，如String类。使用final可以锁定方法，以防止任何继承类修改它的含义，在早期的Java版本中，会将final方法转为内嵌调用，JDK6之后无需此优化。</p></li><li><p><strong><em>避免不需要的instanceof操作</em></strong>：instanceof关键字是Java的一个二元操作符，和“==”“&gt;”类似，使用instanceof比较左边的对象是否是右边类的实例，会返回true或false。合理利用多态特性，可以避免instanceof的使用。</p></li><li><p><strong><em>避免子类中存在父类转换</em></strong>：Java中，所有子类隐含的“等于”父类，因此在子类中无需再转换。</p></li><li><p><strong><em>多使用局部变量</em></strong>：调用方法时传递的参数在调用中创建的临时变量都被保存在栈（Stack）里面，因此读写速度更快。像静态变量、实例变量，它们在堆（Heap）中被创建，保留在堆中，读写速度较慢。</p><blockquote><ul><li>实例对象属于对象的属性，使用时必须创建对象，其实例对象才会被分配空间，才能使用它。静态变量属于类，只要程序加载了类的字节码，不用创建任何实例对象，就会被分配空间。</li></ul></blockquote></li><li><p><strong><em>使用效率最高的位运算</em></strong>：位运算表达式由操作数和位运算符组成，实现对整数类型的二进制数位运算。位运算符可以分为逻辑运算符（包括<code>～</code>、<code>&amp;</code>、<code>|</code>、<code>^</code>）及移位运算符（包括<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code>、<code>&lt;&lt;</code>）。</p><blockquote><ul><li><code>&gt;&gt;&gt;</code>和 <code>&gt;&gt;</code>的区别是，在执行运算时，<code>&gt;&gt;&gt;</code>运算符的操作数高位补0，而<code>&gt;&gt;</code>运算符的操作数高位移入原来的高位的值。</li><li>右移以为相当于除以2，左移一位相当于乘以2（位运算速度高于乘除运算）。</li><li>若进行位逻辑运算的两个操作数的长度不同，则返回值以数据长度较长的数据类型为准。</li><li>按位异或可以不使用临时变量完成两个值的交换，也可以使某个整型数的特定位的翻转。</li><li>按位与运算可以用来屏蔽特定的位，也可以用来取某个整型数中特定的位。</li><li>按位或运算可以用来对某个整型数的特定位置的值置1.</li></ul></blockquote></li><li><p><strong><em>用一维数组代替二维数组</em></strong>：数组的优点是随机访问性能好。二维数组的访问速度要优于一位数组，但是，二维数组占用空间是一维数组的10倍左右。在性能敏感的系统中使用二维数组，如果内存不足，尽量将二维数组替换为一维数组再处理。（二维数组是典型的空间换时间做法）</p></li><li><p><strong><em>布尔运算代替位运算</em></strong>：使用位运算代替布尔运算会使系统多很多无效计算，比如<code>a&amp;&amp;b&amp;&amp;c</code>，当有一个为false时，会跳过后面的计算直接返回结果，但是位运算需要将所有的表达式都计算完才返回结果。</p></li><li><p><strong><em>提取表达式优化</em></strong>：将方法中或代码块中的相同的表达式提取出来，避免重复计算，如<code>a*b*c+d</code>，没次计算都会消耗资源，提取出来只计算一次即可。</p></li><li><p><strong><em>不要总是使用取反操作符（!）</em></strong>：<code>!</code>取反操作符表示异或操作，使用起来方便，但是它会降低程序的可读性。</p></li><li><p><strong><em>不要重复初始化变量</em></strong>：默认情况下，调用类的构造函数时，Java会把变量初始化为一个确定的值，例如将所有对象设置为<code>null</code>，因此，一般情况下，通过构造函数初始化对象。</p></li><li><p><strong><em>在switch语句中使用字符串</em></strong>：在switch或case表达式中，值不能为<code>null</code>，否则会抛空指针异常。在编译时，将字符串<code>hashcode()</code>之后，转为与整数类型兼容的格式。</p></li><li><p><strong><em>数字字面常量的改进</em></strong>：可以将十进制、十六进制转为二进制表示，比如数字<code>9</code>用二进制表示为<code>0b001001</code>。当一个数字太长的时候，使用<code>_</code>分隔符分开，比如<code>5000000</code>可以改成<code>5_000_000</code>。</p></li><li><p><strong><em>优化变长参数方法的调用</em></strong>：一般情况下，方法的参数不宜过多，且最后一个参数为变长参数时，避免和泛型类型一起使用。</p></li><li><p><strong><em>基本数据类型-空变量</em></strong>：通过显式的赋空变量，Eden（新生代的一个区域）就能在新对象创建之前获得自由空间，这样垃圾收集就会更快。</p></li></ol><h4 id="集合处理优化方案"><a href="#集合处理优化方案" class="headerlink" title="集合处理优化方案"></a>集合处理优化方案</h4><ol start="19"><li><strong><em>集合中删除元素</em></strong>：<code>List list = new ArrayList&lt;~&gt;()</code>中，不能直接使用<code>remove()</code>方法删除元素，会发生错误，应该使用<code>Iterator</code>中的删除方法。</li><li><strong><em>集合内部避免返回null</em></strong>：在需要返回数组或集合的方法中，如果需要返回空数据，返回大小为0的数组或集合，避免返回null（在调用方不判空情况下，返回null可能会发生NPE）。</li><li><strong><em>使用迭代、流、并行流</em></strong>：JDK8及以上提供，可读性更好，不易出错，容易并行化。比如：<code>forEach()</code>是线程安全的。可以对其进行并行处理，<code>stream</code>替换为<code>parallelStream</code>（对性能造成严重影响）就可以执行过滤和统计操作。</li></ol><h4 id="字符串优化方案"><a href="#字符串优化方案" class="headerlink" title="字符串优化方案"></a>字符串优化方案</h4><ol start="22"><li><strong><em>善用subString()方法</em></strong>：<code>String.subString()</code>可以截取字符串，该方法适用于字符串长度较短时，当字符串长度很大时，会占用很大的内存，造成内存溢出，可以使用<code>new String(smallStr.toCharArray())</code>替代。因此，当需要截取的字符串长度总和远小于原始字符串文本长度时，使用<code>new String(smallStr.toCharArray())</code>，在大文本字符串处理中有很大优势。当需要截取的字符串长度总和大于原始文本字符串长度时，使用<code>String.subString()</code>可以达到共享内存的目的。</li><li><strong><em>查找单个字符，用chart()代替startsWith()和endsWith()</em></strong>：从性能角度来说，前者会快一些。</li><li><strong><em>字符串相加时，仅一个字符，使用’’替代””</em></strong>：使用字符替代。</li><li><strong><em>字符串切割</em></strong>：使用<code>split()</code>方式切分字符串时性能较差。对比发现，使用<code>StringTokenizer</code>解析字符串更快。<code>StringTokenizer</code>类允许一个应用程序进入一个令牌（Token），<code>StringTokenizer</code>类的对象在内部已经标示化的字符串中维持了当前位置。一些操作使得现有位置上的字符串提前得到处理，一个令牌的值是由获得其曾经创建<code>StringTokenizer</code>类对象的字符串返回的。</li><li><strong><em>字符串连接</em></strong>：字符串连接的方式一般有string对象连接、concat方法、StringBuilder类。而StringBuffer对所有方法都做了同步处理，效率较低，但是在多线程环境下，StringBuilder不是线程安全，无法使用。StringBuilder和StringBuffer两者底层实现都是<code>char[]</code>。对比，性能依次为<code>StringBuilder &gt; concat &gt; string+&#39;a&#39;</code>。</li><li><strong><em>正则表达式</em></strong>：正则表达式不是万能的，根据实际情况使用。</li></ol><h4 id="其它优化"><a href="#其它优化" class="headerlink" title="其它优化"></a>其它优化</h4><ol start="28"><li><strong><em>循环优化</em></strong>：应尽可能减少循环。</li><li><strong><em>使用arrayCopy()</em></strong>：数组复制是一个使用频率很高的功能，<code>System.arrayCopy()</code>函数是native函数，通常native函数性能优于普通函数，ArrayList中大量使用该函数。arrayCopy的本质是让处理器利用一条指令处理一个数组中的多个记录，有点像汇编语言里面的串操作指令，只需要指定头指针，然后开始循环即可，即执行一次指令，指针就后移一个位置，操作多少次就循环多少次。</li><li><strong><em>使用Buffer进行IO操作</em></strong>：多使用缓冲区。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;
&lt;p&gt;造成系统瓶颈计算资源的因素有很多，包括CPU资源的调度、内存的读写、磁盘IO、网络IO、数据库、竞争锁、异常等。而系统性能的衡量指标有响应时间、启动时间、执行时间、执行速度、磁盘吞吐量、网络吞吐量、负载承受能力等。那么，从软件的角度看，性能优化的目标有，编写更高效的代码、使用更高效的算法、减少竞争锁、分布式集群、微服务等。而性能的优化策略有，用空间换时间、用时间换空间、优化代码、并行处理等。系统的优化来自三个方面，基础技术、层次方面、架构方面。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="https://acehjm.github.io/tags/java/"/>
    
      <category term="性能" scheme="https://acehjm.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis知识点梳理</title>
    <link href="https://acehjm.github.io/2018/12/12/Mybatis%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/"/>
    <id>https://acehjm.github.io/2018/12/12/Mybatis知识点梳理/</id>
    <published>2018-12-12T15:44:47.000Z</published>
    <updated>2019-08-19T13:24:59.877Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis架构图：</p><p><img src="https://i.loli.net/2018/12/13/5c1133df0e950.png" alt="Mybatis架构图"></p><a id="more"></a><h4 id="基础支持模块"><a href="#基础支持模块" class="headerlink" title="基础支持模块"></a>基础支持模块</h4><ol><li><p><em>解析器模块</em></p><ul><li>XML解析：DOM（Document Object Model）、SAX（Simple API for XML）、StAX（Streaming API for XML）</li><li>DOM：基于树形结构的XML解析方式，它会将整个XML文档读入内存并构建一个DOM树，基于该树对各个节点（Node）进行操作。</li><li>SAX：基于事件模型的XML解析方式，它将XML文档的一部分加载到内存中，即可开始解析，在处理过程中并不会在内存中记录XML中的数据，所以占用资源比较少。当程序处理过程中满足条件时，也可以立即停止解析过程。SAX没有写XML文档的能力，是一种推模式。</li><li>StAX：JDK提供，可以很好支持DOM和SAX解析方式，与SAX类似，也是把XML文档作为一个事件流进行处理，不同之处在于StAX使用的是拉模式（即应用程序通过调用解析器推进解析的进程）。</li><li>XPath：一种为查询XML文档设计的语言，它使用路径表达式选取XML文档中的节点或节点集合，常结合DOM解析方式一起使用。</li></ul><blockquote><p>MyBatis 中使用了DOM加XPath的解析方式。</p></blockquote></li><li><p><em>反射工具箱</em></p><ul><li>Reflector：是Mybatis中反射模块的基础，每一个Reflector对象都代表对应的一个类，在Reflector中缓存了反射操作需要使用的类的元信息。</li><li>ReflectorFactory：该接口主要实现了对Reflector对象的创建和缓存，<code>isClassCacheEnbale()</code>是检测该ReflectoryFactory对象是否会缓存Reflector对象，<code>setClassCacheEnabled(boolean classCacheEnabled)</code>设值是否缓存Reflector对象，<code>findForClass(Class&lt;?&gt; type)</code>创建指定Class对应的Reflector对象。使用ConcurrentMap集合实现对Reflector对象的缓存。</li><li>TypeParameterResolver：静态解析类，提供一系列方法解析指定类中的字段、方法返回值或方法参数的类型。<code>resolveFieldType()</code>解析字段类型，<code>resolveReturnType()</code>解析返回值类型，<code>resolveParamType()</code>解析方法参数列表中各个参数类型。</li><li>ObjectFactory：通过重载的多个<code>create()</code>方法创建指定类型的对象，是一个反射工厂，其<code>create()</code>方法通过调用<code>instantiateClass()</code>方法实现。</li><li>Property工具集：PropertyTokenizer、PropertyNamer、PropertyCopier，<code>orders[0].name</code>这种由<code>.</code>和<code>[]</code>组成的表达式由PropertyTokenizer解析，方法名到属性名的转换以及多种检测操作由PropertyNamer解析，相同类型的两个对象之间的属性值拷贝由PropertyCopier解析，其核心方法是<code>copyBeanProperties()</code>。</li><li>MetaClass：通过Reflector和PropertyTokenizer组合使用，实现对复杂的属性表达式的解析，并实现了获取指定属性描述信息的功能。MetaClass中比较重要的方法是<code>findProperty()</code>方法，它是通过调用<code>MetaClass.buildProperty()</code>方法实现的，而<code>build Property()</code>方法会通过PropertyTokenizer解析复杂的属性表达式。</li><li>ObjectWrapper：是Mybatis对类级别元信息的封装和处理，该接口是对对象的包装，抽象了对象的属性信息，它定义了一系列查询和更新对象属性信息的方法。</li><li>MetaObject：是对属性表达式的解析，MetaObject的构造方法会根据传入的原始对象的类型以及ObjectFactory工厂的实现，创建相应的ObjectWrapper对象。</li></ul></li><li><p><em>类型转换</em></p><ul><li>TypeHandler：所有类型转换器都继承了TypeHandler接口，TypeHandler接口中有四个方法，分为两类，<code>setParameter()</code>方法负责将数据由JdbcType转换成JavaType，<code>getResult()</code>方法及其重载方法负责将数据由JavaType转换成JdbcType。</li><li>TypeHandlerRegistry：在Mybatis初始化过程中，会为所有已知的TypeHandler创建对象，并实现注册到TypeHanlderRegistry中，由TypeHandlerRegistry负责管理这些TypeHandler。</li><li>TypeAliasRegistry：通过该类完成别名的注册和管理工作，它通过<code>TYPE_ALIASES</code>字段（<code>Map&lt;String, Class&lt;?&gt;&gt;</code>类型）管理别名与JavaType之间的对应关系，通过<code>TypeAliasRegistry.registerAlias()</code>方法完成注册别名。</li></ul></li><li><p><em>日志模块</em></p><ul><li>日志模块使用适配器模式，定义了一套统一的日志接口供上层使用。</li><li>提供了<code>trace</code> 、<code>debug</code>、<code>warn</code>、<code>error</code>四个级别的日志。</li><li>通过JDK动态代理的方式，将JDBC操作通过日志框架打印出来，一般在开发阶段使用。</li></ul></li><li><p><em>资源加载</em></p><ul><li>类加载器：JVM中类加载器（ClassLoader）负责加载来自文件系统、网络或其他来源的类文件，JVM中类加载器默认使用双亲委派模式（双亲委派模式可以保证：一、子加载器可以使用父加载器已加载的类，而父类加载器无法使用子加载器已加载的类；二、父加载器已加载过的类无法被子加载器再次加载。），即子加载器委托父加载器加载。</li><li>ClassLoaderWrapper：是ClassLoader的包装器，其中包含了多个ClassLoader对象，通过调整多个类加载器的使用顺序，ClassLoaderWrapper可以确保返回给系统使用的是正确的类加载器。</li><li>ResolverUtil：可以根据指定条件查找指定包下的类，ResolverUtil中使用classLoader字段记录当前现场上下文绑定的ClassLoader，可以修改使用类加载。</li><li>虚拟文件系统（VFS）：VFS是一个抽象类，用来查找指定路径下的资源。</li></ul></li><li><p><em>数据源模块</em></p><ul><li><p>DataSourceFactory：有UnpooledDataSourceFactory和PooledDataSourceFactory类。</p></li><li><p>UnpooledDataSource：未池化，频繁使用会耗资源。</p></li><li><p>PooledDataSource：实现数据库连接的重用、提高响应速度、防止数据库连接过多造成数据库假死、避免数据库连接泄漏等。数据库连接池会控制连接总数的上限以及空闲连接的上限，如果连接池创建的总连接数已达上限，且已都被占用，则后续请求连接的线程会进入阻塞队列等待，知道有线程释放出可用的连接。如果连接池中空闲连接数较多，达到其上限，则后续返回的空闲连接不会放入池中，而是直接关闭，可以减少系统维护多余数据库连接的开销。</p><blockquote><p>在配置时，空闲连接上限不能设置过大（浪费系统资源来维护空闲连接），也不能设置过小（出现瞬间峰值请求时，系统响应能力较弱），需根据性能测试、权衡以及一些经验配置。</p></blockquote></li></ul></li><li><p><em>事物管理模块</em></p><ul><li>对数据库事务进行了抽象。</li><li>五个接口：<code>getConnection()</code>获取对应的数据库连接，<code>commit()</code>提交事物，<code>rollback()</code>回滚事物，<code>close()</code>关闭数据库连接，<code>getTimeOut()</code>获取事物超时时间。</li></ul></li><li><p><em>绑定模块</em></p><ul><li>Mapper接口类中方法和XML文件中key的映射处理操作。</li><li>MapperRegistry：是Mapper接口及其对应的代理对象工厂的注册中心。</li><li>MapperProxyFactory：主要负责创建代理对象。</li><li>MapperProxy：实现了InvocationHandler接口。</li><li>MapperMethod：封装了Mapper接口中对应的方法的信息，以及对应SQL语句的信息。</li></ul></li><li><p><em>缓存模块</em></p><ul><li>分为两层结构：一级缓存和二级缓存，本质上一样，都是Cache接口的实现。</li><li>Cache：定义了所有缓存的基本行为。</li><li>CacheKey：可以添加多个对象，由这些对象共同确定两个CacheKey对象是否相同，CacheKey重写了<code>equals()</code>方法和<code>hashCode()</code>方法。</li></ul></li></ol><h4 id="核心处理模块"><a href="#核心处理模块" class="headerlink" title="核心处理模块"></a>核心处理模块</h4><blockquote><p>Mybatis初始化的主要工作是加载并解析mybatis-config.xml配置文件、映射配置文件以及相关的注解信息。</p></blockquote><ul><li>Mybatis的初始化入口是<code>SqlSessionFactoryBuilder.build()</code>。首先是读取配置文件，然后解析文件得到Configuration对象，创建DefaultSqlSessionFactory对象。</li><li>Configuration是Mybatis初始化过程中的核心对象，几乎全部配置信息都会保存到Configuration对象中，它是在Mybatis初始化过程中创建且是全局唯一。</li><li>XMLConfigBuilder是BaseBuilder子类之一，主要负责解析mybatis-config.xml配置文件，它的<code>parse()</code>方法是解析配置文件的入口。</li><li>XMLMapperBuilder负责解析映射配置文件，也是继承BaseBuilder抽象类，<code>parse()</code>方法是解析配置文件的入口。</li><li>XMLStatementBuilder用来解析SQL节点，Mybatis使用SqlSource接口表示映射文件或注解中定义的SQL语句，但它表示的SQL语句不能直接被数据库执行，因为其中可能含有动态SQL语句相关的节点或是占位符等需要解析的元素。</li><li>SqlNode用来解析SQL语句中定义的动态SQL节点、文本节点等。</li><li>SqlSource接口中<code>getBoundSql(Object parameterObject)</code>方法通过解析得到BoundSql对象，其中封装了包含<code>&quot;?&quot;</code>占位符的SQL语句，以及绑定的实参。</li><li>DynamicContext主要用来记录解析动态SQL语句之后产生的SQL语句片段，可以认为它是一个用于记录动态SQL语句解析结果的容器。</li><li>SqlSourceBuilder主要完成两方面的操作，一方面是解析SQL语句中的<code>#{}</code>占位符中定义的属性，格式类似于<code>#{_frc-item_0,javaType=int,jdbcType=NUERIC,typeHandler=MyTypeHandler}</code>，另一方面是将SQL语句中的<code>#{}</code>占位符替换成<code>?</code>占位符。</li><li>DynamicSqlSource负责解析动态SQL语句，也是最常用的SqlSource实现之一。</li><li>RowSqlSource是SqlSource的另一个实现，其逻辑与DynamicSqlSource类似，但是执行的时机不一样，处理的SQL语句类型也不一样。RowSqlSource在构造方法中首先会调用<code>getSql()</code>方法，其中通过调用<code>SqlNode.apply()</code>方法完成SQL语句的拼接和初步处理，之后会使用<code>SqlSourcebuilder</code>完成占位符的替换和ParameterMapping集合的创建，并返回StaticSqlSource对象。</li><li>ResultSetHandler负责映射select语句查询得到的结果集，同时还会处理存储过程执行后的输出参数。</li><li>KeyGenerator接口提供业务逻辑需要获取插入记录时产生的自增主键。</li><li>StatementHandler是Mybatis的核心接口之一，它的接口功能有创建Statement对象，为SQL语句绑定实参，执行select|insert|update|delete等多种类型的SQL语句，批量执行SQL语句，将结果集映射成结果对象等。</li><li>Executor是Mybatis核心接口之一，其中定义了数据库操作的基本方法。在实际应用中经常涉及的SqlSession接口的功能，都是基于Executor接口实现的。</li></ul><h4 id="接口模块"><a href="#接口模块" class="headerlink" title="接口模块"></a>接口模块</h4><ul><li>SqlSession中定义了常用数据库操作方法，如增删改查等。</li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><blockquote><p>Mybatis中，插件通过拦截器的方式实现，可以自定义很多强大的功能，如主键生成、黑白名单、分页、分库、分表等。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/12/13/5c1133df0e950.png&quot; alt=&quot;Mybatis架构图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://acehjm.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="mybatis" scheme="https://acehjm.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>技术类相关概念整理</title>
    <link href="https://acehjm.github.io/2018/12/12/%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5%E8%AE%B0%E5%BD%95/"/>
    <id>https://acehjm.github.io/2018/12/12/技术概念记录/</id>
    <published>2018-12-12T03:06:34.000Z</published>
    <updated>2019-08-19T17:18:07.616Z</updated>
    
    <content type="html"><![CDATA[<p>技术名称/概念太多，一些很少用到但是要接触的概念还是要记录下来，写在这里的目的是，进来就能看到。 </p><a id="more"></a><h4 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h4><p><strong>多租户技术</strong>（英语：<strong>multi-tenancy technology</strong>）或称<strong>多重租赁技术</strong>，是一种<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">软件架构</a>技术，它是在探讨与实现如何于多用户的环境下共享相同的系统或程序组件，并且仍可确保各用户间数据的隔离性。</p><p>在多租户技术中，租户（tenant）是指使用系统或计算机运算资源的客户，但在多租户技术中，租户包含在系统中可识别为指定用户的一切数据，举凡账户与统计信息（accounting data），用户在系统中建置的各式数据，以及用户本身的客制化应用程序环境等，都属于租户的范围，而租户所使用的则是基于供应商所开发或建置的应用系统或运算资源等，供应商所设计的应用系统会容纳数个以上的用户在同一个环境下使用，为了要让多个用户的环境能力同一个应用程序与运算环境上使用，则应用程序与运算环境必须要特别设计，除了可以让系统平台可以允许同时让多份相同的应用程序运行外，保护租户数据的隐私与安全也是多租户技术的关键之一。</p><p>技术上，多租户技术可以透过许多不同的方式来切割用户的应用程序环境或数据。</p><ul><li>数据面（data approach）：供应商可以利用切割<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%BA%AB" target="_blank" rel="noopener">数据库</a>（database），切割<a href="https://zh.wikipedia.org/w/index.php?title=%E5%84%B2%E5%AD%98%E5%8D%80&action=edit&redlink=1" target="_blank" rel="noopener">存储区</a>（storage），切割<a href="https://zh.wikipedia.org/w/index.php?title=%E7%B5%90%E6%A7%8B%E6%8F%8F%E8%BF%B0&action=edit&redlink=1" target="_blank" rel="noopener">结构描述</a>（schema）或是<a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E6%A0%BC" target="_blank" rel="noopener">表格</a>（table）来隔离租户的数据，必要时会需要进行对称或非对称加密以保护敏感数据，但不同的隔离作法有不同的实现复杂度与风险。</li><li>程序面（application approach）：供应商可以利用应用程序挂载（hosting）环境，于<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>（process）上切割不同租户的应用程序运行环境，在无法跨越进程通信的情况下，保护各租户的应用程序运行环境，但供应商的运算环境要够强。</li><li>系统面（system approach）：供应商可以利用虚拟化技术，将实体运算单元切割成不同的虚拟机，各租户可以使用其中一至数台的虚拟机来作为应用程序与数据的保存环境，但对供应商的运算能力要更要求。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;技术名称/概念太多，一些很少用到但是要接触的概念还是要记录下来，写在这里的目的是，进来就能看到。 &lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://acehjm.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="概念" scheme="https://acehjm.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>spring boot custom HttpMessageConverter with kotlin</title>
    <link href="https://acehjm.github.io/2017/04/13/spring-boot-custom-HttpMessageConverter-with-kotlin/"/>
    <id>https://acehjm.github.io/2017/04/13/spring-boot-custom-HttpMessageConverter-with-kotlin/</id>
    <published>2017-04-13T02:11:04.000Z</published>
    <updated>2019-08-19T17:19:36.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">Make everything as simple as possible, but not simpler.                                                                    --- Albert Einstein</blockquote><p>在 Spring Boot 开发过程中，有时候需要自定义数据类型，而默认的 <code>HttpMessageConverter</code> 不能将自定义数据类型序列化为想要的数据，因此需要自定义序列化与反序列化。<code>Gson</code> 或 <code>Jackson</code> 实现</p><a id="more"></a><p>自定义类型为 <code>CustomType</code> 。</p><p><code>Gson</code> 实现，继承 <code>GsonHttpMessageConverter</code> 类，并实现 <code>JsonSerializer</code> 和 <code>JsonDeserializer</code> 接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomGsonHttpMessageConverter</span> : <span class="type">GsonHttpMessageConverter</span></span>() &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">//自定义Gson转换器</span></span><br><span class="line">        <span class="keyword">super</span>.setGson(GsonBuilder()</span><br><span class="line">                .serializeNulls()  <span class="comment">//null值属性也需要序列化(添加此项可将实体类中为空的数据序列化到json中，其值为null</span></span><br><span class="line">                 <span class="comment">//注册到Gson的类型适配器</span></span><br><span class="line">                .registerTypeAdapter(CustomType::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">CustomTypeConverterAdapter</span></span>())</span><br><span class="line">                .create())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------JsonSerializer-------JsonDeserializer------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义CustomType序列化与反序列化</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeConverterAdapter</span> : <span class="type">JsonSerializer</span>&lt;<span class="type">CustomType</span>&gt;, <span class="type">JsonDeserializer</span>&lt;<span class="type">CustomType</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(src: <span class="type">CustomType</span>?, typeOfSrc: <span class="type">Type</span>, context: <span class="type">JsonSerializationContext</span>)</span></span>: JsonElement</span><br><span class="line">                = <span class="keyword">if</span> (src == <span class="literal">null</span>) JsonPrimitive(<span class="string">""</span>) <span class="keyword">else</span> JsonPrimitive(src.toString())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(json: <span class="type">JsonElement</span>, typeOfT: <span class="type">Type</span>, context: <span class="type">JsonDeserializationContext</span>)</span></span>: CustomType</span><br><span class="line">                = CustomType(json.asJsonPrimitive.asString)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Jackson</code> 实现，继承 <code>MappingJackson2HttpMessageConverter</code> 类，分别继承抽象类 <code>JsonSerializer</code> 和 <code>JsonDeserializer</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomJackson2HttpMessageConverter</span> : <span class="type">MappingJackson2HttpMessageConverter</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setObjectMapper(</span><br><span class="line">                Jackson2ObjectMapperBuilder()</span><br><span class="line">          <span class="comment">//通过自定义类型注册到ObjectMapper</span></span><br><span class="line">                        .deserializerByType(CustomType::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">CustomTypeDeserialize</span></span>())</span><br><span class="line">                        .serializerByType(CustomType::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">CustomTypeSerialize</span></span>())</span><br><span class="line">                        .serializationInclusion(JsonInclude.Include.NON_NULL)</span><br><span class="line">                        .build()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeDeserialize</span> : <span class="type">JsonDeserializer</span>&lt;<span class="type">tag_t</span>&gt;</span>() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">deserialize</span><span class="params">(parser: <span class="type">JsonParser</span>?, context: <span class="type">DeserializationContext</span>?)</span></span>: CustomType</span><br><span class="line">                = CustomType(parser?.text ?: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeSerialize</span> : <span class="type">JsonSerializer</span>&lt;<span class="type">tag_t</span>&gt;</span>() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">serialize</span><span class="params">(value: <span class="type">CustomType</span>?, generator: <span class="type">JsonGenerator</span>?, provider: <span class="type">SerializerProvider</span>?)</span></span> &#123;</span><br><span class="line">            generator?.writeString(value?.toString() ?: <span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过 WebConfig 配置消息转换器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> : <span class="type">WebMvcConfigurerAdapter</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">configureMessageConverters</span><span class="params">(converters: <span class="type">MutableList</span>&lt;<span class="type">HttpMessageConverter</span>&lt;*&gt;&gt;)</span></span> &#123;</span><br><span class="line">        <span class="comment">//注册多个HttpMessageConverter(按顺序调用)</span></span><br><span class="line">        converters.add(CustomGsonHttpMessageConverter())</span><br><span class="line">        converters.add(CustomJackson2HttpMessageConverter())</span><br><span class="line">        <span class="keyword">super</span>.configureMessageConverters(converters)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上通过 Java Configure 的方式配置，也可通过在 application.yml 文件中配置相关数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;Make everything as simple as possible, but not simpler. 
                                                                   --- Albert Einstein&lt;/blockquote&gt;

&lt;p&gt;在 Spring Boot 开发过程中，有时候需要自定义数据类型，而默认的 &lt;code&gt;HttpMessageConverter&lt;/code&gt; 不能将自定义数据类型序列化为想要的数据，因此需要自定义序列化与反序列化。&lt;code&gt;Gson&lt;/code&gt; 或 &lt;code&gt;Jackson&lt;/code&gt; 实现&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://acehjm.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://acehjm.github.io/tags/java/"/>
    
      <category term="kotlin" scheme="https://acehjm.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin &amp; Spring boot 使用@Valid校验无效解决方法</title>
    <link href="https://acehjm.github.io/2017/04/12/Kotlin-Spring-boot-%E4%BD%BF%E7%94%A8-Valid%E6%A0%A1%E9%AA%8C%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://acehjm.github.io/2017/04/12/Kotlin-Spring-boot-使用-Valid校验无效解决方法/</id>
    <published>2017-04-12T09:32:12.000Z</published>
    <updated>2019-08-19T13:00:09.984Z</updated>
    
    <content type="html"><![CDATA[<p>kotlin data （对应Java实体类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"user"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line">        <span class="meta">@NotNull(message = <span class="meta-string">"用户名不能为空"</span>)</span></span><br><span class="line">        <span class="meta">@Column(name = <span class="meta-string">"user_name"</span>, nullable = false)</span></span><br><span class="line">        <span class="keyword">var</span> userName: String = <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull(message = <span class="meta-string">"用户ID不能为空"</span>)</span></span><br><span class="line">        <span class="meta">@Column(name = <span class="meta-string">"user_id"</span>, unique = true)</span></span><br><span class="line">        <span class="keyword">var</span> userId: String = <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Email(message = <span class="meta-string">"无效的邮箱"</span>)</span></span><br><span class="line">        <span class="keyword">var</span> email: String = <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Column(nullable = false)</span></span><br><span class="line">        <span class="keyword">var</span> password: String = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">) : Serializable</span><br></pre></td></tr></table></figure><a id="more"></a><p>再来看controller</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/user"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> userRepository: UserRepository</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(value = <span class="meta-string">"/put"</span>,</span></span><br><span class="line"><span class="meta">     consumes = arrayOf(MediaType.APPLICATION_JSON_UTF8_VALUE)</span>)</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">put</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> user: <span class="type">SysUser</span>)</span></span>: ResponseEntity&lt;SysUser&gt;? &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">val</span> fieldErrors = result.fieldErrors</span><br><span class="line">            <span class="keyword">for</span> (fieldError <span class="keyword">in</span> fieldErrors) &#123;</span><br><span class="line">                println(<span class="string">"<span class="subst">$&#123;fieldError.defaultMessage&#125;</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fieldErrors</span><br><span class="line">        &#125;</span><br><span class="line">        println(user)</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .ok()</span><br><span class="line">                .cacheControl(CacheControl.maxAge(<span class="number">30</span>, TimeUnit.DAYS))</span><br><span class="line">                .eTag(<span class="string">"AC"</span>) </span><br><span class="line">                .body(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用put方法，<code>@Valid</code>校验无效</p><p>原因分析：</p><blockquote><p>在 java 中，将 validation 注解到实体类属性或者 get/set 方法上，但是在 kotlin 中，属性直接写在构造函数中，validation 注解并没有作用到属性上。</p></blockquote><p>解决方法：</p><blockquote><p>使用 <code>@field:</code> 标识符，<code>field</code>标识符只允许在属性的访问器函数内使用。它能够 validation 校验注解作用与属性。</p></blockquote><p>将 kotlin data class 稍作修改：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"user"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line">        <span class="meta">@field:NotNull</span>(message = <span class="string">"用户名不能为空"</span>)</span><br><span class="line">        <span class="meta">@Column(name = <span class="meta-string">"user_name"</span>, nullable = false)</span></span><br><span class="line">        <span class="keyword">var</span> userName: String = <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:NotNull</span>(message = <span class="string">"用户ID不能为空"</span>)</span><br><span class="line">        <span class="meta">@Column(name = <span class="meta-string">"user_id"</span>, unique = true)</span></span><br><span class="line">        <span class="keyword">var</span> userId: String = <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:NotBlank</span>(message = <span class="string">"邮箱不能为空"</span>)</span><br><span class="line">        <span class="meta">@field:Email</span>(message = <span class="string">"无效的邮箱"</span>)</span><br><span class="line">        <span class="keyword">var</span> email: String = <span class="string">""</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:NotBlank</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">        <span class="meta">@Column(nullable = false)</span></span><br><span class="line">        <span class="keyword">var</span> password: String = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">) : Serializable</span><br></pre></td></tr></table></figure><p>之后，<code>@Valid</code>校验即可正常工作</p><p>再次执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://localhost:8080/user/put11</span><br></pre></td></tr></table></figure><p><code>@Valid</code>正常工作</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2017-03-04 13:54:19"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</span><br><span class="line">  <span class="attr">"exception"</span>: <span class="string">"org.springframework.web.bind.MethodArgumentNotValidException"</span>,</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"userId"</span>,</span><br><span class="line">      <span class="attr">"rejectedValue"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"objectName"</span>: <span class="string">"sysUser"</span>,</span><br><span class="line">      <span class="attr">"codes"</span>: [</span><br><span class="line">        <span class="string">"NotNull.sysUser.userId"</span>,</span><br><span class="line">        <span class="string">"NotNull.userId"</span>,</span><br><span class="line">        <span class="string">"NotNull.java.lang.String"</span>,</span><br><span class="line">        <span class="string">"NotNull"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"arguments"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"codes"</span>: [</span><br><span class="line">            <span class="string">"sysUser.userId"</span>,</span><br><span class="line">            <span class="string">"userId"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"arguments"</span>: <span class="literal">null</span>,</span><br><span class="line">          <span class="attr">"defaultMessage"</span>: <span class="string">"userId"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"defaultMessage"</span>: <span class="string">"用户ID不能为空"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Validation failed for object='sysUser'. Error count: 1"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/user/put"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kotlin data （对应Java实体类&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Entity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Table(name = &lt;span class=&quot;meta-string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@NotNull(message = &lt;span class=&quot;meta-string&quot;&gt;&quot;用户名不能为空&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Column(name = &lt;span class=&quot;meta-string&quot;&gt;&quot;user_name&quot;&lt;/span&gt;, nullable = false)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userName: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@NotNull(message = &lt;span class=&quot;meta-string&quot;&gt;&quot;用户ID不能为空&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Column(name = &lt;span class=&quot;meta-string&quot;&gt;&quot;user_id&quot;&lt;/span&gt;, unique = true)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userId: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Email(message = &lt;span class=&quot;meta-string&quot;&gt;&quot;无效的邮箱&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; email: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Column(nullable = false)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; password: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) : Serializable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kotlin" scheme="https://acehjm.github.io/tags/kotlin/"/>
    
      <category term="spring boot" scheme="https://acehjm.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate自定义类型</title>
    <link href="https://acehjm.github.io/2017/01/03/Hibernate%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/"/>
    <id>https://acehjm.github.io/2017/01/03/Hibernate自定义类型/</id>
    <published>2017-01-03T08:50:56.000Z</published>
    <updated>2019-08-19T13:06:00.414Z</updated>
    
    <content type="html"><![CDATA[<p>Hibernate对一些基本类型的映射提供了很好的支持，但有时候我们需要映射自定义或更复杂的数据类型，比如一个List集合，可以通过基本类型映射实现，需要在数据库中新建一张表，这种方式增加了数据库开销；也可以将List集合中的数据拼接成字符串再存储，这种方式导致程序可读性不友好，同时增加代码的复杂度；Hibernate提供了DiscriminatorType和UserType接口，方便用户自定义需要映射的数据类型。这里以UserType为例实现。</p><a id="more"></a><p>假设用户需要自定义一个类型，名称为<code>ctype</code>，它是16位字符的<code>char</code>数组，需要映射到数据库<code>VARCHAR</code>类型。</p><p>首先自定义java类型<code>ctype</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ctype</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mtype 的长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> TYPE_LENGTH = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// mtype 实际上就是 char 数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] mtype = <span class="keyword">new</span> <span class="keyword">char</span>[TYPE_LENGTH];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ctype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mtype = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过构造函数转换为ctype类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ctype</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        String str = String.valueOf(object);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(str))</span><br><span class="line">            <span class="keyword">this</span>.mtype = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.mtype = str.toCharArray();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(<span class="keyword">this</span>.mtype).replace(<span class="string">" "</span>, <span class="string">""</span>).length() &lt; TYPE_LENGTH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(<span class="keyword">this</span>.mtype);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ctype ctype = (ctype) o;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(mtype, ctype.mtype);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode(mtype);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现Hibernate<code>UserType</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hibernate自定义类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">customType</span> <span class="keyword">implements</span> <span class="title">UserType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] TYPES = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Types.VARCHAR&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改类型对应的SQL类型（这里用VARCHAR</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sqlTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> TYPES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改customType对应的java类型（此处java类型为ctype</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">returnedClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ctype.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义数据类型比对方法</span></span><br><span class="line"><span class="comment">     * 用作脏数据检查，o,o1为两个副本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o, Object o1)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(o, o1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回给定类型的hashCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(Object o)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据转换为自定义类型返回</span></span><br><span class="line"><span class="comment">     * strings包含了自定义类型的映射字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">nullSafeGet</span><span class="params">(ResultSet resultSet, String[] strings, </span></span></span><br><span class="line"><span class="function"><span class="params">                              SessionImplementor sessionImplementor, Object o)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> HibernateException, SQLException </span>&#123;</span><br><span class="line">        String s = (String) resultSet.getObject(strings[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (resultSet.wasNull()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.replaceAll(<span class="string">" "</span>, <span class="string">""</span>).isEmpty())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ctype(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据保存时被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nullSafeSet</span><span class="params">(PreparedStatement preparedStatement, Object o, <span class="keyword">int</span> i, </span></span></span><br><span class="line"><span class="function"><span class="params">                            SessionImplementor sessionImplementor)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> HibernateException, SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == o) &#123;</span><br><span class="line">            preparedStatement.setNull(i, Types.VARCHAR);   <span class="comment">//保存空值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String stringValue = String.valueOf(o);</span><br><span class="line">            preparedStatement.setString(i, stringValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义类型的完全复制方法,构造返回对象</span></span><br><span class="line"><span class="comment">     * 1. 当nullSafeGet方法调用之后，我们获得了自定义数据对象，</span></span><br><span class="line"><span class="comment">     *  在向用户返回自定义数据之前,deepCopy方法被调用，</span></span><br><span class="line"><span class="comment">     *    它将根据自定义数据对象构造一个完全拷贝，把拷贝返还给客户使用。</span></span><br><span class="line"><span class="comment">     * 2. 此时我们就得到了自定义数据对象的两个版本</span></span><br><span class="line"><span class="comment">     *    原始版本由hibernate维护，用作脏数据检查依据;</span></span><br><span class="line"><span class="comment">     *    复制版本由用户使用，hibernate将在脏数据检查过程中比较这两个版本的数据;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepCopy</span><span class="params">(Object o)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ctype c = (ctype) o;</span><br><span class="line">        ctype nc = <span class="keyword">new</span> ctype();</span><br><span class="line">        nc = c;</span><br><span class="line">        <span class="keyword">return</span> nc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示本类型实例是否可变</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMutable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * method called when Hibernate puts the data in a second level cache. The</span></span><br><span class="line"><span class="comment">     * data is stored in a serializable form （官方文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Serializable <span class="title">disassemble</span><span class="params">(Object o)</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ctype) deepCopy(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the object from the 2 level cache （官方文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">assemble</span><span class="params">(Serializable serializable, Object o)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> HibernateException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deepCopy(serializable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">replace</span><span class="params">(Object o, Object o1, Object o2)</span> </span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deepCopy(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注解方式使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entity -&gt; Item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"d_item"</span>)</span><br><span class="line"><span class="meta">@TypeDef</span>(name = <span class="string">"myType"</span>, typeClass = customType.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Type</span>(type = <span class="string">"myType"</span>)</span><br><span class="line">    <span class="keyword">private</span> ctype uid;</span><br><span class="line">  </span><br><span class="line">   ... ...</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hibernate对一些基本类型的映射提供了很好的支持，但有时候我们需要映射自定义或更复杂的数据类型，比如一个List集合，可以通过基本类型映射实现，需要在数据库中新建一张表，这种方式增加了数据库开销；也可以将List集合中的数据拼接成字符串再存储，这种方式导致程序可读性不友好，同时增加代码的复杂度；Hibernate提供了DiscriminatorType和UserType接口，方便用户自定义需要映射的数据类型。这里以UserType为例实现。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://acehjm.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="技术" scheme="https://acehjm.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="https://acehjm.github.io/tags/java/"/>
    
      <category term="spring" scheme="https://acehjm.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>读看见</title>
    <link href="https://acehjm.github.io/2016/01/29/%E8%AF%BB%E7%9C%8B%E8%A7%81/"/>
    <id>https://acehjm.github.io/2016/01/29/读看见/</id>
    <published>2016-01-29T01:22:46.000Z</published>
    <updated>2019-08-19T17:19:19.873Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">“痛苦是财富，这话是扯淡。姑娘，痛苦就是痛苦，”他说，“对痛苦的思考才是财富。”</blockquote><a id="more"></a><p><em>对遭受的侮辱，不需要愤怒，也不需要还击，只需要蔑视。</em> 那时看了《苍穹之下》，很触动，内心共鸣。短短两个多小时的视频，却道出了很多环境问题。而她更是以迅雷不及掩耳之势被封杀。当时想，一个眼前的问题，人人皆知，却没人说，她说了，很多人认同，也有很多人对她各种质疑。有人说她编造数据，夸大危害，哗众取宠，制造社会紧张。而我们关注的重点难道不是雾霾？难道不是恶劣的环境问题吗？很多人把矛头指向她，很多人给她护盾，这样是改变不了环境的。</p><hr><p>从《夜色温柔》开始，先后在《时空连线》、《新闻调查》、《看见》等栏目担任主持人与记者，对她的了解，更多的不是从电视上的主持人，是现场记者。她做了很多专题，每一期都反映了当时社会的一个普遍现象。家暴、腐败、温情、非典、奥运会、征地等等，每一次的镜头都让人触动。<em>他们几乎都是村子里最贫穷的人，几乎都酗酒，喝的时候咒骂赚了钱的人，回家打老婆孩子。有人说：“这些人，只是农村的失败者，城市里没有。”</em> 在做这期节目的时候，谁又会想的到会有人这么说呢，是社会给他们生活绝望，他们没有看到希望，只是看到比他们好的，自己又没有能力改变什么，于是饮酒和暴力成了他们的力量，但这给家庭带来难以想象的灾难。<em>全世界都存在难以根除的家庭暴力，没有任何婚姻制度可以承诺给人幸福，但应该有制度使人可以避免极端的不幸。</em>是的，家暴难以根除，不仅仅是穷人，有地位的人也是，李阳拖着肥大的身体，不也对妻子施以暴力吗。拿什么去约束，法律吗？法律在哪里呢？法制的不健全也是造成施暴者和受暴者的悲剧。当事人自己更应该负起责任吧。在采访老家工厂污染时也能想象的到吧，那样的环境下还有人苦苦挣扎着生存。我有时也会常常想，为什么不搬家呢?为什么不举报不反映呢？难道就那样眼睁睁看着有人得了污染病一个个死去吗？怎么没有人站出来呢？也许就是没那么简单吧，这里不仅仅是污染者与被污染者的事，还有各方利益，政府、工厂、村民，大家都有自己的利益，何乐而不为呢？难道健康和生命就那么容易被藐视吗？</p><hr><p><em>探寻就是要不断相信、不断怀疑、不断幻灭、不断摧毁、不断重建，为的只是避免成为偏见的附庸。或者说，煽动各种偏见的互殴，从而取得平衡，这是我所理解的‘探寻<em>，她自己也在探寻吧，在她寻求平衡的过程中，恐怕也遭受了很多无奈吧，就像那句</em>不要太爱惜自己的羽毛</em> 一样，人总会受伤吧，但是仅仅为了保护自己不受伤而放弃我们应得的东西是否太过懦弱了呢？<em>你们说要争自由，自由是针对外面束缚而言的，独立是你们自己的事，给你自由而不独立，仍是奴隶。独立要不盲从，不受欺骗，不依赖门户，不依赖别人，这就是独立的精神。</em> 可是，现在大多数人在沉默，不敢言不敢怒，不敢当家做主。这社会一副病怏怏的样子，却找不到一个可以治得好的医生。在面对那么多的问题的时候，又有多少人关心和在乎受伤的人呢？</p><p>希望还能再听见她的声音，也希望能有更多的声音。</p><hr><p>“无论如何，你看到的总是你自己。死在路上的甲虫，它是像你一样为了生存而奋斗的生命，像你一样喜欢太阳，像你一样懂得害怕和痛苦，现在，它却成了腐烂的肌体，就像你今后也会如此。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;“痛苦是财富，这话是扯淡。姑娘，痛苦就是痛苦，”他说，“对痛苦的思考才是财富。”&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="https://acehjm.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="随笔" scheme="https://acehjm.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
